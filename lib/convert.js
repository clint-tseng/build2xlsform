// Generated by LiveScript 1.5.0
(function(){
  var ref$, isType, map, filter, foldl, join, flatten, keys, empty, deepcopy, build, isNonsense, exprValue, surveyFields, choicesFields, multilingualFields, pruneFalse, fieldnameConversion, typeConversion, choiceTypeConversion, dateTypeConversion, dateKindConversion, locationTypeConversion, metadataTypeConversion, appearanceConversion, newContext, genRange, convertQuestion, genSettings, convertForm, serializeForm;
  ref$ = require('prelude-ls'), isType = ref$.isType, map = ref$.map, filter = ref$.filter, foldl = ref$.foldl, join = ref$.join, flatten = ref$.flatten;
  ref$ = require('prelude-ls').Obj, keys = ref$.keys, empty = ref$.empty;
  deepcopy = require('deepcopy');
  build = require('node-xlsx')['default'].build;
  isNonsense = function(value){
    return value == null || value === '' || (isType('Object', value) && empty(value));
  };
  exprValue = function(value){
    switch (false) {
    case value !== null:
      return "''";
    case !isType('String')(
      value):
      return "'" + value + "'";
    default:
      return value;
    }
  };
  surveyFields = ['type', 'name', 'label', 'hint', 'required', 'read_only', 'default', 'constraint', 'constraint_message', 'relevant', 'calculation', 'appearance'];
  choicesFields = ['list name', 'name', 'label'];
  multilingualFields = ['label', 'hint', 'constraint_message'];
  pruneFalse = ['required', 'read_only', 'range', 'length', 'count'];
  fieldnameConversion = {
    defaultValue: 'default',
    relevance: 'relevant',
    calculate: 'calculation',
    invalidText: 'constraint_message',
    readOnly: 'read_only'
  };
  typeConversion = {};
  choiceTypeConversion = {
    inputSelectOne: 'select_one',
    inputSelectMany: 'select_multiple'
  };
  dateTypeConversion = {
    'Full Date and Time': 'dateTime',
    'Full Date': 'date',
    'Year and Month': 'date',
    'Year': 'date'
  };
  dateKindConversion = {
    'Year and Month': 'month-year',
    'Year': 'year'
  };
  locationTypeConversion = {
    'Point': 'geopoint',
    'Path': 'geotrace',
    'Shape': 'geoshape'
  };
  metadataTypeConversion = {
    'Device Id': 'deviceid',
    'Start Time': 'start',
    'End Time': 'end',
    'Today': 'today',
    'Username': 'username',
    'Subscriber ID': 'subscriberid',
    'SIM Serial': 'simserial',
    'Phone Number': 'phonenumber'
  };
  appearanceConversion = {
    'Show Map (GPS)': 'maps',
    'Manual (No GPS)': 'placement-map',
    'Minimal (spinner)': 'minimal',
    'Table': 'label',
    'Horizontal Layout': 'horizontal'
  };
  newContext = function(){
    return {
      seenFields: {},
      choices: {},
      warnings: []
    };
  };
  genRange = function(range, self){
    self == null && (self = '.');
    return [self + " >" + (range.minInclusive === true ? '=' : '') + " " + exprValue(range.min), self + " <" + (range.maxInclusive === true ? '=' : '') + " " + exprValue(range.max)];
  };
  convertQuestion = function(question, context, prefix){
    var choiceId, frm, ref$, too, ref1$, key, value, length, range, count, destination, res$, i$, len$, child;
    prefix == null && (prefix = []);
    question = deepcopy(question);
    prefix = prefix.concat([question.name]);
    choiceId = "choices_" + prefix.join('_');
    for (frm in ref$ = fieldnameConversion) {
      too = ref$[frm];
      if (question[frm] != null) {
        question[too] = (ref1$ = question[frm], delete question[frm], ref1$);
      }
    }
    for (key in question) {
      value = question[key];
      if (value === false && in$(key, pruneFalse)) {
        delete question[key];
      }
    }
    for (key in question) {
      value = question[key];
      if (isNonsense(value)) {
        delete question[key];
      }
    }
    question.constraint = question.constraint != null
      ? [question.constraint]
      : [];
    if ((length = (ref$ = question.length, delete question.length, ref$)) != null) {
      question.constraint = ((ref$ = question.constraint) != null
        ? ref$
        : []).concat("regex(., \"^.{" + length.min + "," + length.max + "}$\")");
    }
    if ((range = (ref$ = question.range, delete question.range, ref$)) != null) {
      question.constraint = ((ref$ = question.constraint) != null
        ? ref$
        : []).concat(genRange(range));
    }
    if ((count = (ref$ = question.count, delete question.count, ref$)) != null) {
      question.constraint = ((ref$ = question.constraint) != null
        ? ref$
        : []).concat(genRange(count, 'count-selected(.)'));
    }
    if (question.constraint.length === 0) {
      delete question.constraint;
    } else {
      question.constraint = join(' and ')(
      map(function(it){
        return "(" + it + ")";
      })(
      question.constraint));
    }
    if (question.options != null) {
      if (context.choices[choiceId] != null) {
        context.warnings = context.warnings.concat(["Multiple choice lists have the ID '" + choiceId + "'. The last one encountered is used."]);
      }
      context.choices[choiceId] = (ref$ = question.options, delete question.options, ref$);
    }
    if (question.appearance != null) {
      question.appearance = appearanceConversion[ref$ = question.appearance, delete question.appearance, ref$];
    }
    if (question.type === 'inputDate') {
      if (dateTypeConversion[question.kind] != null) {
        question.appearance = dateKindConversion[question.kind];
      }
    }
    if ((ref$ = question.fieldList, delete question.fieldList, ref$) === true) {
      question.appearance = 'field-list';
    }
    question.type = question.type === 'inputNumeric'
      ? ((ref$ = (ref1$ = question.kind, delete question.kind, ref1$)) != null ? ref$ : 'integer').toLowerCase()
      : question.type === 'inputMedia'
        ? ((ref$ = (ref1$ = question.kind, delete question.kind, ref1$)) != null ? ref$ : 'image').toLowerCase()
        : question.type === 'inputDate'
          ? dateTypeConversion[(ref$ = (ref1$ = question.kind, delete question.kind, ref1$)) != null ? ref$ : 'Full Date']
          : question.type === 'inputLocation'
            ? locationTypeConversion[(ref$ = (ref1$ = question.kind, delete question.kind, ref1$)) != null ? ref$ : 'Point']
            : question.type === 'metadata'
              ? metadataTypeConversion[(ref$ = (ref1$ = question.kind, delete question.kind, ref1$)) != null ? ref$ : 'Device ID']
              : question.type === 'group'
                ? (ref$ = question.loop, delete question.loop, ref$) === true ? 'repeat' : 'group'
                : question.type in choiceTypeConversion
                  ? choiceTypeConversion[question.type] + " " + choiceId
                  : question.type in typeConversion
                    ? typeConversion[question.type]
                    : question.type.slice(5).toLowerCase();
    for (key in question) {
      value = question[key];
      if (value === true || value === false) {
        question[key] = value === true ? 'yes' : 'no';
      }
    }
    for (key in question) {
      context.seenFields[key] = true;
    }
    if ((destination = (ref$ = question.destination, delete question.destination, ref$)) != null) {
      context.warnings = context.warnings.concat(["A custom xpath destination of '" + destination + "' was specified. XLSForm does not support this feature and the declaration has been dropped."]);
    }
    if (question.children != null) {
      res$ = [];
      for (i$ = 0, len$ = (ref$ = question.children).length; i$ < len$; ++i$) {
        child = ref$[i$];
        res$.push(convertQuestion(child, context, prefix));
      }
      question.children = res$;
    }
    return question;
  };
  genSettings = function(form){
    var ref$;
    return [['form_title', 'form_id'], [form.title, "build_" + ((ref$ = form.title) != null ? ref$.replace(/([^a-z0-9]+)/ig, '-') : void 8) + "_" + Math.floor(new Date().getTime() / 1000)]];
  };
  convertForm = function(form){
    var context, intermediate, res$, i$, ref$, len$, question, languages, seenFields, choices, warnings, expandLanguages, genSchema, surveySchema, choicesSchema, genLang, surveySimpleFields, genRows, surveyRows, choicesRows, name, entries, entry, warning, this$ = this;
    context = newContext();
    res$ = [];
    for (i$ = 0, len$ = (ref$ = form.controls).length; i$ < len$; ++i$) {
      question = ref$[i$];
      res$.push(convertQuestion(question, context));
    }
    intermediate = res$;
    languages = form.metadata.activeLanguages;
    seenFields = context.seenFields, choices = context.choices, warnings = context.warnings;
    expandLanguages = function(field){
      var i$, ref$, len$, language, results$ = [];
      if (in$(field, multilingualFields)) {
        for (i$ = 0, len$ = (ref$ = languages).length; i$ < len$; ++i$) {
          language = ref$[i$];
          results$.push(field + "::" + language);
        }
        return results$;
      } else {
        return [field];
      }
    };
    genSchema = function(seen, all){
      var this$ = this;
      return foldl(function(fields, field){
        return fields.concat(expandLanguages(field));
      }, [])(
      filter((function(it){
        return in$(it, seen);
      }))(
      all));
    };
    surveySchema = genSchema(keys(seenFields), surveyFields);
    choicesSchema = genSchema(choicesFields, choicesFields);
    genLang = function(obj){
      var i$, ref$, len$, language, results$ = [];
      for (i$ = 0, len$ = (ref$ = languages).length; i$ < len$; ++i$) {
        language = ref$[i$];
        results$.push(obj != null ? obj[language] : void 8);
      }
      return results$;
    };
    surveySimpleFields = filter((function(it){
      return in$(it, keys(seenFields));
    }))(
    surveyFields);
    genRows = function(question){
      var ref$, field;
      if (isType('Array')(
      question)) {
        return foldl(function(rows, question){
          return rows.concat(genRows(question));
        }, [])(
        question);
      } else if ((ref$ = question.type) === 'group' || ref$ === 'repeat') {
        return genRows((ref$ = clone$(question), ref$.type = "begin " + question.type, ref$)).concat(genRows(question.children), [["end " + question.type]]);
      } else {
        return [flatten(
        (function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = surveySimpleFields).length; i$ < len$; ++i$) {
            field = ref$[i$];
            if (in$(field, multilingualFields)) {
              results$.push(genLang(question[field]));
            } else {
              results$.push(question[field]);
            }
          }
          return results$;
        }()))];
      }
    };
    surveyRows = genRows(intermediate);
    res$ = [];
    for (name in choices) {
      entries = choices[name];
      for (i$ = 0, len$ = entries.length; i$ < len$; ++i$) {
        entry = entries[i$];
        res$.push([name, entry.val].concat(genLang(entry.text)));
      }
    }
    choicesRows = res$;
    return [
      {
        name: 'survey',
        data: [surveySchema].concat(surveyRows)
      }, {
        name: 'choices',
        data: [choicesSchema].concat(choicesRows)
      }, {
        name: 'settings',
        data: genSettings(form)
      }, {
        name: 'warnings',
        data: (function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = ['message'].concat(warnings != null
            ? warnings
            : ['No warnings; everything looked fine.'])).length; i$ < len$; ++i$) {
            warning = ref$[i$];
            results$.push([[warning]]);
          }
          return results$;
        }())
      }
    ];
  };
  serializeForm = curry$(function(stream, sheets){
    stream.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    stream.setHeader('Content-Disposition', 'fieldname="converted.xlsx"');
    stream.write(build(sheets));
    stream.statusCode = 200;
    return stream.end();
  });
  module.exports = {
    newContext: newContext,
    convertQuestion: convertQuestion,
    convertForm: convertForm,
    genSettings: genSettings,
    serializeForm: serializeForm
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
